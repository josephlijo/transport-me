// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using TransportMe.Places.Infrastructure;

namespace TransportMe.Places.API.Infrastructure.Migrations
{
    [DbContext(typeof(PlacesContext))]
    partial class PlacesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290")
                .HasAnnotation("Relational:Sequence:places.LocationSequence", "'LocationSequence', 'places', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TransportMe.Places.Domain.AggregatesModel.LocationAggregate.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "LocationSequence")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "places")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("IdentityGuid")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdentityGuid")
                        .IsUnique();

                    b.ToTable("Location","places");
                });

            modelBuilder.Entity("TransportMe.Places.Domain.AggregatesModel.LocationAggregate.Location", b =>
                {
                    b.OwnsOne("TransportMe.Places.Domain.AggregatesModel.LocationAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<int?>("LocationId");

                            b1.Property<string>("City");

                            b1.Property<string>("Country");

                            b1.Property<string>("State");

                            b1.Property<string>("Street");

                            b1.Property<string>("ZipCode");

                            b1.ToTable("Location","places");

                            b1.HasOne("TransportMe.Places.Domain.AggregatesModel.LocationAggregate.Location")
                                .WithOne("Address")
                                .HasForeignKey("TransportMe.Places.Domain.AggregatesModel.LocationAggregate.Address", "LocationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
