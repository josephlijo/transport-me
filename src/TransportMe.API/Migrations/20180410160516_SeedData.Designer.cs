// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using TransportMe.Entities;

namespace TransportMe.API.Migrations
{
    [DbContext(typeof(TransportMeContext))]
    [Migration("20180410160516_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TransportMe.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.SeedData(new[]
                    {
                        new { Id = 1, Country = "England", Name = "London" },
                        new { Id = 2, Country = "Japan", Name = "Tokyo" }
                    });
                });

            modelBuilder.Entity("TransportMe.Entities.TransportMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TransportMode");

                    b.SeedData(new[]
                    {
                        new { Id = 1, Name = "Bus" },
                        new { Id = 2, Name = "Cable Car" },
                        new { Id = 3, Name = "Cycle Hire" },
                        new { Id = 4, Name = "Dlr" },
                        new { Id = 5, Name = "National Rail" },
                        new { Id = 6, Name = "Overground" },
                        new { Id = 7, Name = "River Bus" },
                        new { Id = 8, Name = "TFL Rail" },
                        new { Id = 9, Name = "Tram" },
                        new { Id = 10, Name = "Tube" }
                    });
                });

            modelBuilder.Entity("TransportMe.Entities.TransportService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityId");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TransportModeId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TransportModeId");

                    b.ToTable("TransportService");

                    b.SeedData(new[]
                    {
                        new { Id = 1, CityId = 1, Name = "Bakerloo", TransportModeId = 10 },
                        new { Id = 2, CityId = 1, Name = "Central", TransportModeId = 10 },
                        new { Id = 3, CityId = 1, Name = "Circle", TransportModeId = 10 },
                        new { Id = 4, CityId = 1, Name = "District", TransportModeId = 10 },
                        new { Id = 5, CityId = 1, Name = "Hammersmith & City", TransportModeId = 10 },
                        new { Id = 6, CityId = 1, Name = "Jubilee", TransportModeId = 10 },
                        new { Id = 7, CityId = 1, Name = "Metropolitan", TransportModeId = 10 },
                        new { Id = 8, CityId = 1, Name = "Northern", TransportModeId = 10 },
                        new { Id = 9, CityId = 1, Name = "Piccadilly", TransportModeId = 10 },
                        new { Id = 10, CityId = 1, Name = "Victoria", TransportModeId = 10 },
                        new { Id = 11, CityId = 1, Name = "Waterloo & City", TransportModeId = 10 }
                    });
                });

            modelBuilder.Entity("TransportMe.Entities.TransportService", b =>
                {
                    b.HasOne("TransportMe.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TransportMe.Entities.TransportMode", "TransportMode")
                        .WithMany()
                        .HasForeignKey("TransportModeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
